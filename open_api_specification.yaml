openapi: "3.0.0"
info:
  version: "1.0.0"
  title: "Real Device API"
  x-last-modified: "2025-01-20"
servers:
  - url: https://api.us-west-1.saucelabs.com/rdc/v2/
    description: us-west
  - url: https://api.eu-central-1.saucelabs.com/rdc/v2/
    description: eu-central
  - url: https://api.us-east-4.saucelabs.com/rdc/v2/
    description: us-east
security:
  - basicAuth: []
paths:
  /devices/status:
    get:
      summary: "List the status of all devices"
      description: "Lists the current status of all devices. For private devices, additional details are available, including the precise state and current user. The data reflects the device state with a maximum delay of 1 second at the 99th percentile (p99)."
      tags:
        - "Device Catalog"
      parameters:
        - name: state
          in: query
          description: Filter by device state
          style: form
          explode: true
          schema:
            $ref: "#/components/schemas/DeviceStatus"
        - name: privateOnly
          in: query
          description: Show only private devices for the authenticated customer
          schema:
            type: boolean
        - name: deviceName
          in: query
          description: "Filter by a device identifier. This value can be a specific ID or a regular expression (regex). The filter is applied to both the `descriptor` (e.g., \"iPhone_13_real\") and the `deviceName` fields of a device. For more details on regex patterns, see the Sauce Labs documentation on Dynamic Device Allocation (https://docs.saucelabs.com/mobile-apps/supported-devices/#static-and-dynamic-device-allocation)."
          schema:
            type: string
            example: "iPhone.*"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  devices:
                    type: array
                    items:
                      $ref: "#/components/schemas/Device"
        "401":
          $ref: "#/components/responses/NotAuthorized"
  /sessions:
    post:
      summary: "Allocate a device and create a new session"
      description: |
        Creates a new device session.
      tags:
        - "Session Lifecycle"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                device:
                  type: object
                  properties:
                    deviceName:
                      type: string
                      description: "Specify a device for the session. This value can be a specific ID (e.g., \"iPhone_16_real\") or a regular expression (regex) to dynamically allocate a device from a group. The filter is applied against the `descriptor` and `deviceName` fields of available devices. If omitted, Sauce Labs will select any available device. For more details, see the documentation on Dynamic Device Allocation (https://docs.saucelabs.com/mobile-apps/supported-devices/#static-and-dynamic-device-allocation)."
                      example: "iPhone_16_real"
                    os:
                      description: Filter by operating system (Android or iOS). The enum is case insensitive.
                      type: string
                      enum: [android, ios]
                      example: ios
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionCreation"
        "400":
          $ref: "#/components/responses/BadRequest"
    get:
      summary: List device sessions
      description: Retrieves a list of device sessions, including pending, active and recently closed sessions.
      tags:
        - "Session Lifecycle"
      parameters:
        - name: state
          in: query
          required: false
          description: Filter out sessions returned based on state
          schema:
            $ref: "#/components/schemas/SessionState"
        - name: deviceName
          in: query
          required: false
          description: "Filter sessions by device identifier. This value can be a specific ID or a regular expression (regex). The filter is applied to both the `descriptor` and `deviceName` fields associated with the session's device. For more details on regex patterns, see the Sauce Labs documentation on Dynamic Device Allocation (https://docs.saucelabs.com/mobile-apps/supported-devices/#static-and-dynamic-device-allocation)."
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Session"
        "401":
          $ref: "#/components/responses/NotAuthorized"
  /sessions/{sessionId}:
    get:
      summary: Get details of a specific device session
      tags:
        - "Session Lifecycle"
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The id of the device session
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        "404":
          $ref: "#/components/responses/DeviceSessionNotFound"
    delete:
      summary: Close and release a device session
      tags:
        - "Session Lifecycle"
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The id of the device session
          schema:
            type: string
        - name : rebootDevice
          in: query
          required: false
          description: Perform a device reboot after session release. Only applicable for private devices.
          schema:
            $ref: "#/components/schemas/RebootDevice"
      responses:
        "200":
          $ref: "#/components/responses/CloseDeviceSession"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/DeviceSessionNotFound"

  /sessions/{sessionId}/device/openUrl:
    post:
      summary: Open a url (through browser) or a deeplink to an app
      description: "Depending on a scheme the OS will decide how to open the url. 'https:' is usually handled by the browser, 'tel:' opens the telephone. If you registered a custom scheme for your app, your app will be opened. Please note: as of this moment deeplinking is only supported for iOS, for Android we will open everything in Chrome!"
      tags:
        - "Device Interactions"
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The id of the device session
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - url
              properties:
                url:
                  type: string
                  example: "https://example.com"
      responses:
        "204":
          description: Command executed successfully
        "400":
          $ref: "#/components/responses/DeviceIsNotReady"
        "404":
          $ref: "#/components/responses/DeviceSessionNotFound"

  /sessions/{sessionId}/device/installApp:
    post:
      summary: Install an app from App Storage
      description: Install an app on the device. The installation will take place in the background. Use listAppInstallations to query for status.
      tags:
        - "Device Interactions"
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The id of the device session
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppInstallation"
      responses:
        "200":
          description: Command executed successfully
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/AppInstallationStatus"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/DeviceSessionNotFound"

  /sessions/{sessionId}/device/listAppInstallations:
    post:
      summary: List ongoing, completed and failed app installations
      tags:
        - "Device Interactions"
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The id of the device session
          schema:
            type: string
      responses:
        "200":
          description: Command executed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  appInstallations:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppInstallationStatus"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/DeviceSessionNotFound"

  /sessions/{sessionId}/device/launchApp:
    post:
      summary: Launch an app on device
      tags:
        - "Device Interactions"
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The id of the device session
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                bundleId:
                  type: string
                  description: Bundle identifier (iOS)
                  example: "com.apple.XXX"
                packageName:
                  type: string
                  description: Package Name of app to launch (Android)
                  example: "com.android.XXX"
                activityName:
                  type: string
                  description: Main Activity Name of app to launch (Android)
                  example: "com.android.XXX.Activity"
      responses:
        "200":
          description: Command executed successfully
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/DeviceSessionNotFound"

  /sessions/{sessionId}/device/startAppiumServer:
    post:
      summary: Starts an appium server attached to the device session.
      tags:
        - "Device Interactions"
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The id of the device session
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - appiumVersion
              properties:
                appiumVersion:
                  type: string
                  description: The appium version to use. Please check https://docs.saucelabs.com/mobile-apps/automated-testing/appium/appium-versions/#real-devices
                  example: "latest"
      responses:
        "200":
          description: Command executed successfully
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/DeviceSessionNotFound"

  /sessions/{sessionId}/device/proxy/http/{targetHost}/{targetPort}/{targetPath}:
    get:
      summary: Forward a single http request via a proxy running on the device. Tranparently forwards the provided GET request and proxies the response from the server as the proxy in the device receives it
      tags:
        - "HTTP Proxy"
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The id of the device session
          schema:
            type: string
        - name: targetHost
          in: path
          required: true
          description: The target host to make the request to
          schema:
            type: string
            example: "localhost"
        - name: targetPort
          in: path
          required: true
          description: The port the target host is listening in
          schema:
            type: string
            example: "8100"
        - name: targetPath
          in: path
          required: true
          description: The path to make the request to. Can contain query parameters, which wil be forwared too.
          schema:
            type: string
            example: "status"
      responses:
        "200":
          description: Command executed successfully
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/DeviceSessionNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    post:
      summary: Forward a single http request via a proxy running on the device. Tranparently forwards the provided POST request and proxies the response from the server as the proxy in the device receives it
      tags:
        - "HTTP Proxy"
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The id of the device session
          schema:
            type: string
        - name: targetHost
          in: path
          required: true
          description: The target host to make the request to
          schema:
            type: string
            example: "localhost"
        - name: targetPort
          in: path
          required: true
          description: The port the target host is listening in
          schema:
            type: string
            example: "8100"
        - name: targetPath
          in: path
          required: true
          description: The path to make the request to. Can contain query parameters, which wil be forwared too.
          schema:
            type: string
            example: "status"
      responses:
        "200":
          description: Command executed successfully
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/DeviceSessionNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    put:
      summary: Forward a single http request via a proxy running on the device. Tranparently forwards the provided PUT request and proxies the response from the server as the proxy in the device receives it
      tags:
        - "HTTP Proxy"
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The id of the device session
          schema:
            type: string
        - name: targetHost
          in: path
          required: true
          description: The target host to make the request to
          schema:
            type: string
            example: "localhost"
        - name: targetPort
          in: path
          required: true
          description: The port the target host is listening in
          schema:
            type: string
            example: "8100"
        - name: targetPath
          in: path
          required: true
          description: The path to make the request to. Can contain query parameters, which wil be forwared too.
          schema:
            type: string
            example: "status"
      responses:
        "200":
          description: Command executed successfully
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/DeviceSessionNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    delete:
      summary: Forward a single http request via a proxy running on the device. Tranparently forwards the provided DELETE request and proxies the response from the server as the proxy in the device receives it
      tags:
        - "HTTP Proxy"
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The id of the device session
          schema:
            type: string
        - name: targetHost
          in: path
          required: true
          description: The target host to make the request to
          schema:
            type: string
            example: "localhost"
        - name: targetPort
          in: path
          required: true
          description: The port the target host is listening in
          schema:
            type: string
            example: "8100"
        - name: targetPath
          in: path
          required: true
          description: The path to make the request to. Can contain query parameters, which wil be forwared too.
          schema:
            type: string
            example: "status"
      responses:
        "200":
          description: Command executed successfully
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/DeviceSessionNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    head:
      summary: Forward a single http request via a proxy running on the device. Tranparently forwards the provided HEAD request and proxies the response from the server as the proxy in the device receives it
      tags:
        - "HTTP Proxy"
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The id of the device session
          schema:
            type: string
        - name: targetHost
          in: path
          required: true
          description: The target host to make the request to
          schema:
            type: string
            example: "localhost"
        - name: targetPort
          in: path
          required: true
          description: The port the target host is listening in
          schema:
            type: string
            example: "8100"
        - name: targetPath
          in: path
          required: true
          description: The path to make the request to. Can contain query parameters, which wil be forwared too.
          schema:
            type: string
            example: "status"
      responses:
        "200":
          description: Command executed successfully
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/DeviceSessionNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
    options:
      summary: Forward a single http request via a proxy running on the device. Tranparently forwards the provided OPTIONS request and proxies the response from the server as the proxy in the device receives it
      tags:
        - "HTTP Proxy"
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The id of the device session
          schema:
            type: string
        - name: targetHost
          in: path
          required: true
          description: The target host to make the request to
          schema:
            type: string
            example: "localhost"
        - name: targetPort
          in: path
          required: true
          description: The port the target host is listening in
          schema:
            type: string
            example: "8100"
        - name: targetPath
          in: path
          required: true
          description: The path to make the request to. Can contain query parameters, which wil be forwared too.
          schema:
            type: string
            example: "status"
      responses:
        "200":
          description: Command executed successfully
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/DeviceSessionNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: |
        HTTP Basic Authentication using your Sauce Labs credentials.
        - **Username**: Your Sauce Labs username.
        - **Password**: Your Sauce Labs access key.
        
        You can find both your username and access key on the **Account > User Settings** page in the Sauce Labs UI.
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            type: object
            properties:
              type:
                type: string
                example: about:blank
              title:
                type: string
                example: Device does not exist.
              detail:
                type: string
                example: 'The deviceId "Samsung XR" does not exist. Please ensure you provide an existing device Id.'
    NotAuthorized:
      description: Not Authorized
      content:
        application/problem+json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: Authorization failed
    DeviceSessionNotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: string
                example: about:blank
              title:
                type: string
                example: Did not find session.
              detail:
                type: string
                example: Did not find session '123e4567-e89b-12d3-a456-426614174000'. Please make sure it exists and you have access to it.
    TooManyRequests:
      description: Too many requests
      content:
        application/problem+json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Too many concurrent requests
    CloseDeviceSession:
      description: Session is closing
      content:
        application/json:
          schema:
            type: object
            properties:
              sessionId:
                $ref: "#/components/schemas/SessionId"
              state:
                $ref: "#/components/schemas/SessionState"
                example: CLOSING
    DeviceIsNotReady:
      description: Device not ready
      content:
        application/problem+json:
          schema:
            type: object
            properties:
              type:
                type: string
                example: about:blank
              title:
                type: string
                example: Device not ready.
              detail:
                type: string
                example: "You tried to interact with the device, but the state of you session is 'PENDING'. The state needs to be 'ACTIVE', if you want to interact with the device."
  schemas:
    DeviceStatus:
      type: string
      enum:
        - "AVAILABLE"
        - "IN_USE"
        - "CLEANING"
        - "REBOOTING"
        - "MAINTENANCE"
        - "OFFLINE"
      example: "IN_USE"
      description: the current state of the device. For private devices you will se a more specific state. For public devices we present an aggregated state. If one device that shares a descriptorId is available, then the entire descriptor will be marked as available.
    Device:
      type: object
      properties:
        descriptor:
          type: string
          example: "iPhone_13_real"
        isPrivateDevice:
          type: boolean
          example: true
        status:
          $ref: "#/components/schemas/DeviceStatus"
        inUseBy:
          type: array
          items:
            type: object
            properties:
              username:
                type: string
                example: "john.smith"
            required:
              - username
      required:
        - descriptor
        - isPrivateDevice
        - status
    SessionId:
      type: string
      description: Unique id of device session
      example: "123e4567-e89b-12d3-a456-426614174000"
    Session:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/SessionId"
        state:
          $ref: "#/components/schemas/SessionState"
        device:
          type: object
          properties:
            descriptor:
              type: string
              example: "iPhone_13_real"
            deviceName:
              type: string
              example: "iPhone 13 real private"
            os:
              type: string
              example: "ANDROID"
            osVersion:
              type: string
              example: "15.0"
            resolutionWidth:
              description: Screen width in pixels
              type: number
              format: int32
              example: 1080
            resolutionHeight:
              description: Screen height in pixels
              type: number
              format: int32
              example: 2340
            screenSize:
              description: Screen size in inches
              type: number
              format: int32
              example: 6
        links:
          type: object
          properties:
            ioWebsocketUrl:
              type: string
              example: "wss://api.saucelabs.com/rdc/v2/sessions/123e4567-e89b-12d3-a456-426614174000/wss/io"
            eventsWebsocketUrl:
              type: string
              example: "wss://api.saucelabs.com/rdc/v2/sessions/123e4567-e89b-12d3-a456-426614174000/wss/events"
              description: Websocket for retrieving realtime logs, device events, and some statistics
            liveViewUrl:
              type: string
              example: "https://app.staging.saucelabs.net/live/mobile/dataCenters/US/devices/Samsung_Galaxy_S8_real2/shared/123e4567-e89b-12d3-a456-426614174000"
              description: Live test view for the openapi session
            appiumUrl:
              type: string
              example: "https://api.staging.saucelabs.net/rdc/v2/sessions/123e4567-e89b-12d3-a456-426614174000/appium/wd/hub"
              description: Endpoint to reach the appium-server for your session. Please note that you should start the server via /sessions/{sessionId}/device/startAppiumServer
            self:
              type: string
              example: "https://api.saucelabs.com/rdc/v2/sessions/123e4567-e89b-12d3-a456-426614174000"
    SessionCreation:
      type: object
      properties:
        id:
          type: string
        state:
          $ref: "#/components/schemas/SessionState"
    SessionState:
      type: string
      enum:
        - "PENDING"
        - "CREATING"
        - "ACTIVE"
        - "CLOSING"
        - "CLOSED"
        - "ERRORED"
      example: "CREATING"
    RebootDevice:
      type: boolean
      default: false
    AppInstallationStatus:
      type: object
      description: Status of an ongoing or completed app installation process
      properties:
        installationId:
          type: string
          description: "Identifier of this app installation process"
        app:
          type: string
          description: "This should be the location of your app in Sauce Labs App Storage Service or Ephemeral app (e.g., storage:filename=myapp.apk, storage:uuid, https://www.myserver.com/files/myapp.apk)"
          example: "storage:c78ec45e-ea3e-ac6a-b094-00364171addb"
        status:
          type: string
          enum:
            - "PENDING"
            - "FINISHED"
            - "ERROR"
    AppInstallation:
      type: object
      description: Configuration for installing an app on a device.
      properties:
        app:
          type: string
          description: "This should be the location of your app in Sauce Labs App Storage Service (e.g., storage:filename=myapp.apk or storage:uuid)"
          example: "storage:c78ec45e-ea3e-ac6a-b094-00364171addb"
        enableInstrumentation:
          type: boolean
          default: true
          description: |
            Controls Sauce Labs' app instrumentation (which includes **app re-signing for iOS**) for Real Device testing.
            For iOS, this process is **vital for app installation as it ensures the app is correctly signed and provisioned to run on Sauce Labs' diverse real devices.** This step is necessary to meet Apple's security requirements on these cloud devices. Enabling this also unlocks advanced features on both platforms.

            **Automatic Behavior**: This setting is automatically forced to `true` if:
            - The iOS app is signed with an ad-hoc certificate.
            - Any instrumentation-dependent advanced features are enabled (for iOS or Android).

            **Impact of `false`**:
            - iOS: App installation will likely fail, as the app may not meet the code signing and provisioning requirements for cloud devices.
            - Android: Advanced features will be disabled (though the app may still install).

            For best results and compatibility, it's recommended to allow this to be `true`
          example: true
        launchAfterInstall:
          type: boolean
          default: false
          description: "If set to `true`, the app will automatically launch after a successful installation."
          example: true
        features:
          type: object
          properties:
            networkCapture:
              type: boolean
              default: false
              description: "Enable system-wide network capture."
              example: false
            deviceVitals:
              type: boolean
              default: false
              description: "Collect vitals from device while app is running."
              example: false
            imageInjection:
              type: boolean
              default: false
              description: "Enable image injection through camera API."
              example: false
            biometricsInterception:
              type: boolean
              default: false
              description: "Enable interception of biometrics checks."
              example: false
            bypassScreenshotRestriction:
              type: boolean
              default: false
              example: false
            errorReporting:
              type: boolean
              default: false
              example: false
      required:
        - app
